package 设计模式.结构型模式.组合模式;

public class 测试类 {
    public static void main(String[] args) {
        安全的实现方法();
    }

    static void 透明的实现方法(){
        /*// 绘制两个按钮
        new 按钮组件("一号按钮").绘制();
        new 按钮组件("二号按钮").绘制();

        // 绘制一个输入框和文本域
        System.out.println();
        new 输入框组件("一号输入框").绘制();
        new 文本域组件("测试文本").绘制();

        // 绘制一个登陆框
        System.out.println();
        // 在透明方式下，客户程序无序知道是简单组件还是组合组件，直接用抽象组件接收就行
        抽象组件 条令条例文本域 = new 文本域组件("条令条例文本域");
        抽象组件 登录框 = new 登录框聚合组件("一号登录框");
        登录框.添加(new 按钮组件("登陆按钮"));
        登录框.添加(new 按钮组件("忘记密码按钮"));
        登录框.添加(new 输入框组件("账号输入框"));
        登录框.添加(new 输入框组件("密码输入框"));
        登录框.添加(条令条例文本域);
        // 从登录框中删除了文本组件
        登录框.删除(条令条例文本域);
        登录框.绘制();*/
    }

    static void 安全的实现方法(){
        // 绘制两个按钮
        new 按钮组件("一号按钮").绘制();
        new 按钮组件("二号按钮").绘制();

        // 绘制一个输入框和文本域
        System.out.println();
        new 输入框组件("一号输入框").绘制();
        new 文本域组件("测试文本").绘制();

        // 绘制一个登陆框
        System.out.println();
        // 在安全方式下，客户程序需要知道一个组件是简单组件还是组合组件
        文本域组件 条令条例文本域 = new 文本域组件("条令条例文本域");
        登录框聚合组件 登录框 = new 登录框聚合组件("一号登录框");
        登录框.添加(new 按钮组件("登陆按钮"));
        登录框.添加(new 按钮组件("忘记密码按钮"));
        登录框.添加(new 输入框组件("账号输入框"));
        登录框.添加(new 输入框组件("密码输入框"));
        登录框.添加(条令条例文本域);
        // 从登录框中删除了文本组件
        登录框.删除(条令条例文本域);
        登录框.绘制();
    }

}
